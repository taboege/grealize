#!/usr/bin/env perl

=encoding utf8

=head1 NAME

grealize - A gaussoid to realization space compiler

=head1 SYNOPSIS

    grealize -t pd  [-f FORMAT] -- GAUSSOID
    grealize -t sem [-f FORMAT] -- DIGRAPH... GAUSSOID

=cut

use Modern::Perl;
use open qw(:std :utf8);
use utf8;

use Getopt::Long;
use Pod::Usage;

use Cube::Variables;
use Cube::Vertices;
use Matrix::Formal;

=head1 OPTIONS

=over

=item B<-t>, B<--type>

The type of realization space to describe:

=over

=item *

I<pd>: realizations by real, positive-definitive matrices.

=item *

I<sem>: realizations by structural equation models (SEM) having
uncorrelated, normalized noise terms.

=back

The default is I<pd>.

=item B<-f>, B<--format>

How to format the realization space description:

=over

=item *

I<mathematica>: suitable for input into Wolfram Mathematica.

=back

The default is I<mathematica>.

=back

=cut

GetOptions(
    "h|help"     => \my $help,
    "t|type=s"   => \my $type,
    "f|format=s" => \my $format,
) or pod2usage(2);

pod2usage(-exitval => 0, -verbose => 1) if $help;

# By default print a system that describes the space of realizations of
# a gaussoid by positive definite matrices in a format that Mathematica
# understands.
$type   //= 'pd';
$format //= 'mathematica';

=head1 DESCRIPTION

This program takes as input a gaussoid (ordinary or oriented) as a string of
either C<0> and C<1> or C<0>, C<+> and C<-> ASCII characters. Each character
represents the sign assigned to a 2-face of the n-cube according to the ordering
of 2-faces used by L<https://gaussoids.de>.

The program then compiles and prints a description of a realization space of
this (oriented) gaussoid. The notion of realization and the output format are
configurable.

=cut

sub pd_system {
    my ($n, $G, $A) = @_;
    my @system;

    # Positive definiteness
    my $verts = Cube::Vertices->new($n);
    for my $I ($verts->list) {
        my $poly = $A->pr($I);
        push @system, [$poly, '+'];
    }

    # Gaussoid structure
    my $vars = Cube::Variables->new($n);
    for my $ijK ($vars->list) {
        my $poly = $A->apr($ijK);
        my $i = $vars->pack($ijK);
        push @system, [$poly, substr($G,$i-1,1)];
    }

    \@system
}

sub realize_pd {
    my $G = shift // pod2usage(2);
    my $n = Cube::Variables::_compute_dimension(length $G);
    pd_system $n, $G, Matrix::Formal->generic_symmetric($n)
}

sub realize_sem {
    use Graph::Directed;

    # TODO: Ultimately we want to be able to compute the gaussoid from
    # the DAG (no problem) and determine all its orientations and for
    # each of those make a system here. We lack the propcalc package
    # to compute orientations quickly, so currently that must be done
    # by the human before calling this program.
    my $G = pop // pod2usage(2);
    pod2usage(2) unless @_;
    my $D = Graph::Directed->new(@_);
    my $n = 0+ $D->vertices;
    pd_system $n, $G, Matrix::Formal->generic_sem($D)
}

sub format_mathematica {
    my @M;
    for (@{+shift}) {
        use experimental qw(switch);
        my ($poly, $sign) = @$_;
        for ($sign) {
            when ('+') { push @M, "$poly > 0"  }
            when ('-') { push @M, "$poly < 0"  }
            when ('1') { push @M, "$poly != 0" }
            when ('0') { push @M, "$poly == 0" }
            default    { die "don't understand constraint '$_'" }
        }
    }

    "S = " . join(" && ", @M)
}

my $system = lc($type) eq 'pd'  ? realize_pd(@ARGV)  :
             lc($type) eq 'sem' ? realize_sem(@ARGV) :
    die "unknown realization type '$type'";

say lc($format) eq 'mathematica' ? format_mathematica($system) :
    die "unknown formatter '$format'";

=head1 EXAMPLES

Print the semialgebraic system that describes the classical realization space
(positive-definite covariance matrices) of the positively oriented empty
4-gaussoid suitable for input into Wolfram Mathematica:

    $ grealize -t pd -f mathematica -- $(perl -e 'print "+" x 24')
    S = (1) > 0 &&
      (1) > 0 &&
      ...
      (1 + -1*a^2) > 0 &&
      (1 + -1*b^2) > 0 &&
      ...
      (1 + -1*a^2 + -1*b^2 + 2*a*b*d + -1*d^2) > 0 &&
      (1 + -1*a^2 + -1*c^2 + 2*a*c*e + -1*e^2) > 0 &&
      ...
      (1 + -1*a^2 + -1*b^2 + -1*c^2 + 2*a*b*d + -1*d^2 + c^2*d^2 + 2*a*c*e + -2*b*c*d*e + -1*e^2 + b^2*e^2 + 2*b*c*f + -2*a*c*d*f + -2*a*b*e*f + 2*d*e*f + -1*f^2 + a^2*f^2) > 0 &&
      (a) > 0 &&
      (a + -1*b*d) > 0 &&
      ...

Semialgebraic system for the space of parameters of an SEM (with uncorrelated
noise of variance 1) for the 4-path as a DAG, which satisfies the constraints
of the attached 4-gaussoid (which is the d-separation graphoid of the DAG):

    $ grealize -t sem -- 12 23 34 111110101000111111001111

This effectively describes the "generic part" of the Gaussian structural
equation model of the 4-path. By picking orientations of this gaussoid,
positive or negative correlations can be imposed on the model, extracting
subcomponents of this generic part.

This distribution also contains a convenience script C<dag-model.sh> which,
when provided with a DAG and a database of oriented gaussoids, such as the
ones obtainable from L<https://gaussoids.de>, calls C<grealize> with the
DAG and each orientation of the DAG's d-separation graphoid, printing each
system for the SEM intersected with the oriented gaussoid's realization
space, ready for immediate bulk pasting into Mathematica.

This allows to quickly determine which I<orientations> of the DAG-representable
gaussoids are actually realizable, in the oriented sense, by SEMs.

=head1 AUTHOR

Tobias Boege <tobs@taboege.de>

=head1 COPYRIGHT AND LICENSE

This software is copyright (C) 2020 by Tobias Boege.

This is free software; you can redistribute it and/or
modify it under the terms of the Artistic License 2.0.
